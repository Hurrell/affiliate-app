{"version":3,"sources":["renderers/renderIncomeByTag.js","functions/getCommission.js","functions/incomeByTag.js","functions/xlsxImporter.js","App.js","serviceWorker.js","index.js"],"names":["RenderIncomeByTag","props","layout","groupMode","data","totalsByTag","keys","indexBy","margin","top","right","bottom","left","padding","colors","scheme","defs","id","type","background","color","size","stagger","rotation","lineWidth","spacing","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","animate","motionStiffness","motionDamping","getCommission","tagName","defaultCommissionList","tag","commission","commissionIndex","findIndex","e","Number","incomeByTag","tagTotals","Error","item","itemIndex","lineCost","qty","push","sales","income","category","tabletIncome","deviceTypeGroup","desktopIncome","phoneIncome","toFixed","sort","a","b","xlsxImporter","file","target","files","Promise","resolve","reject","reader","FileReader","onload","event","workbook","XLSX","read","result","first_worksheet","Sheets","SheetNames","utils","sheet_to_json","header","length","feb2020Headers","i","jsObjData","name","row","asin","date","linkType","indirectSales","arrayToJsObj","onerror","console","log","readAsBinaryString","App","useState","setJsObjData","handleFileInput","chart","className","accept","onChange","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e18fbf19.chunk.js","sourcesContent":["import { ResponsiveBar } from \"@nivo/bar\";\nimport React from \"react\";\nimport { useTheme } from \"@nivo/core\";\n\nconst RenderIncomeByTag = (props) => {\n  return (\n    <ResponsiveBar\n      // axisLeft={{\n      //   renderTick: CustomTick,\n      // }}\n      layout=\"horizontal\"\n      groupMode=\"stacked\"\n      data={props.totalsByTag}\n      keys={[\"tabletIncome\", \"phoneIncome\", \"desktopIncome\"]}\n      //   keys={[\"hot dog\", \"burger\", \"sandwich\", \"kebab\", \"fries\", \"donut\"]}\n      indexBy=\"tag\"\n      margin={{ top: 50, right: 130, bottom: 50, left: 150 }}\n      padding={0.3}\n      colors={{ scheme: \"nivo\" }}\n      defs={[\n        {\n          id: \"dots\",\n          type: \"patternDots\",\n          background: \"inherit\",\n          color: \"#38bcb2\",\n          size: 4,\n          padding: 1,\n          stagger: true,\n        },\n        {\n          id: \"lines\",\n          type: \"patternLines\",\n          background: \"inherit\",\n          color: \"#eed312\",\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10,\n        },\n      ]}\n      fill={[\n        {\n          match: {\n            id: \"fries\",\n          },\n          id: \"dots\",\n        },\n        {\n          match: {\n            id: \"sandwich\",\n          },\n          id: \"lines\",\n        },\n      ]}\n      borderColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Income ($)\",\n        legendPosition: \"middle\",\n        legendOffset: 32,\n      }}\n      axisLeft={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"\",\n        legendPosition: \"middle\",\n        legendOffset: -40,\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\n      legends={[\n        {\n          dataFrom: \"keys\",\n          anchor: \"bottom-right\",\n          direction: \"column\",\n          justify: false,\n          translateX: 120,\n          translateY: 0,\n          itemsSpacing: 2,\n          itemWidth: 100,\n          itemHeight: 20,\n          itemDirection: \"left-to-right\",\n          itemOpacity: 0.85,\n          symbolSize: 20,\n          effects: [\n            {\n              on: \"hover\",\n              style: {\n                itemOpacity: 1,\n              },\n            },\n          ],\n        },\n      ]}\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n    />\n  );\n};\n\nexport default RenderIncomeByTag;\n\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\n","const getCommission = (tagName) => {\n  //returns commission as decimal e.g. 1% == 0.01\n  const defaultCommissionList = [\n    { tag: \"Computers, Tablets & Components\", commission: 0.025 },\n    { tag: \"Cell Phones & Accessories\", commission: 0.04 },\n    { tag: \"Books & Textbooks\", commission: 0.045 },\n  ];\n\n  const commissionIndex = defaultCommissionList.findIndex(\n    (e) => tagName === e.tag\n  );\n  //return false if no value avail\n  if (commissionIndex === -1) {\n    return 0.04;\n  } else {\n    // return computed value\n    const commission = defaultCommissionList[commissionIndex].commission;\n    return Number(commission);\n  }\n};\n\nexport default getCommission;\n","import getCommission from \"./getCommission\";\n\nconst incomeByTag = (data) => {\n  let tagTotals = [];\n\n  if (!data.data) {\n    throw Error(\"No Data\");\n  }\n  //iterate through each data point\n  for (let item of data.data) {\n    let itemIndex = tagTotals.findIndex((e) => e.tag === item.tag);\n    let lineCost = Number(item.qty) * Number(item[\"price($)\"]);\n    //add tag if unique\n    if (itemIndex === -1) {\n      tagTotals.push({\n        tag: item.tag,\n        sales: lineCost,\n        income: Number(getCommission(item.category) * lineCost),\n        tabletIncome:\n          item.deviceTypeGroup === \"TABLET\"\n            ? getCommission(item.category) * lineCost\n            : 0,\n        desktopIncome:\n          item.deviceTypeGroup === \"DESKTOP\"\n            ? getCommission(item.category) * lineCost\n            : 0,\n        phoneIncome:\n          item.deviceTypeGroup === \"PHONE\"\n            ? getCommission(item.category) * lineCost\n            : 0,\n      });\n    } else {\n      // update tag total\n      tagTotals[itemIndex].sales += lineCost;\n      tagTotals[itemIndex].income += Number(\n        getCommission(item.category) * lineCost\n      );\n      tagTotals[itemIndex].tabletIncome +=\n        item.deviceTypeGroup === \"TABLET\"\n          ? getCommission(item.category) * lineCost\n          : 0;\n      tagTotals[itemIndex].desktopIncome +=\n        item.deviceTypeGroup === \"DESKTOP\"\n          ? getCommission(item.category) * lineCost\n          : 0;\n      tagTotals[itemIndex].phoneIncome +=\n        item.deviceTypeGroup === \"PHONE\"\n          ? getCommission(item.category) * lineCost\n          : 0;\n    }\n  }\n  //round all numbers to nearest cent\n  for (let tag of tagTotals) {\n    if (tag.sales) {\n      // console.log(typeof tag.sales);\n      tag.sales = Number(tag.sales.toFixed(2));\n      // console.log(typeof tag.sales);\n    }\n    if (tag.income) {\n      // console.log(tag.income);\n\n      tag.income = Number(tag.income.toFixed(2));\n      // console.log(tag.income);\n    }\n    if (tag.tabletIncome) {\n      tag.tabletIncome = Number(tag.tabletIncome.toFixed(2));\n    }\n    if (tag.desktopIncome) {\n      tag.desktopIncome = Number(tag.desktopIncome.toFixed(2));\n    }\n    if (tag.phoneIncome) {\n      tag.phoneIncome = Number(tag.phoneIncome.toFixed(2));\n    }\n  }\n  //sort it all!\n  tagTotals = tagTotals.sort((a, b) => {\n    if (a.income > b.income) {\n      return -1;\n    } else if (a.income < b.income) {\n      return 1;\n    }\n    return 0;\n  });\n\n  return tagTotals;\n};\n\nexport default incomeByTag;\n","import XLSX from \"xlsx\";\n// import { readFile } from \"react-native-fs\";\n\n// const file = \"../resources/exampleUSASales.xlsx\";\n/* read a workbook */\nconst arrayToJsObj = (data) => {\n  if (data[1].length !== 10) {\n    throw Error(\"Sheet is not compatible\");\n  }\n  const feb2020Headers = [\n    \"Category\",\n    \"Name\",\n    \"ASIN\",\n    \"Date\",\n    \"Qty\",\n    \"Price($)\",\n    \"Link Type\",\n    \"Tag\",\n    \"Indirect Sales\",\n    \"Device Type Group\",\n  ];\n\n  for (let i in feb2020Headers) {\n    if (feb2020Headers[i] !== data[1][i]) {\n      throw Error(\"Data values not recognised\");\n    }\n  }\n\n  let jsObjData = { name: data[0][0], data: [] };\n\n  for (let i = 2; i < data.length; i++) {\n    let row = data[i];\n    jsObjData.data.push({\n      category: row[0],\n      name: row[1],\n      asin: row[2],\n      date: row[3],\n      qty: row[4],\n      \"price($)\": row[5],\n      linkType: row[6],\n      tag: row[7],\n      indirectSales: row[8],\n      deviceTypeGroup: row[9],\n    });\n  }\n\n  return jsObjData;\n};\n\nconst xlsxImporter = (e) => {\n  let file = e.target.files[0];\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      // call 'xlsx' to read the file\n      let workbook = XLSX.read(event.target.result, { type: \"binary\" });\n      /* convert from workbook to array of arrays */\n      var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      const data = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\n\n      // console.log(data);\n      resolve(arrayToJsObj(data));\n    };\n    reader.onerror = (e) => {\n      console.log(e);\n    };\n    reader.readAsBinaryString(file);\n  });\n};\n\nexport default xlsxImporter;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport RenderIncomeByTag from \"./renderers/renderIncomeByTag\";\nimport incomeByTag from \"./functions/incomeByTag\";\nimport exampleJsonObj from \"./resources/exampleJsonObj\";\nimport XLSX from \"xlsx\";\nimport xlsxImporter from \"./functions/xlsxImporter\";\n\nfunction App() {\n  const [jsObjData, setJsObjData] = useState({});\n\n  const handleFileInput = async (e) => {\n    try {\n      const data = await xlsxImporter(e);\n      console.log(data);\n      setJsObjData(data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  let chart = \"\";\n  if (jsObjData.data) {\n    chart = <RenderIncomeByTag totalsByTag={incomeByTag(jsObjData)} />;\n  }\n  return (\n    <div className=\"App\">\n      <input\n        type=\"file\"\n        id=\"file-selector\"\n        accept=\".xlsx\"\n        onChange={handleFileInput}\n      ></input>\n      <div className=\"tag-chart\">{chart}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}